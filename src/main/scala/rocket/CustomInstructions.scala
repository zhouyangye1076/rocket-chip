// See LICENSE.SiFive for license details.
// See LICENSE.Berkeley for license details.

package freechips.rocketchip.rocket

import chisel3.util._

object CustomInstructions {
  def MNRET              = BitPat("b01110000001000000000000001110011")
  def CEASE              = BitPat("b00110000010100000000000001110011")
  def CFLUSH_D_L1        = BitPat("b111111000000?????000000001110011")
  def CDISCARD_D_L1      = BitPat("b111111000010?????000000001110011")
  def CUSTOM0            = BitPat("b?????????????????000?????0001011")
  def CUSTOM0_RS1        = BitPat("b?????????????????010?????0001011")
  def CUSTOM0_RS1_RS2    = BitPat("b?????????????????011?????0001011")
  def CUSTOM0_RD         = BitPat("b?????????????????100?????0001011")
  def CUSTOM0_RD_RS1     = BitPat("b?????????????????110?????0001011")
  def CUSTOM0_RD_RS1_RS2 = BitPat("b?????????????????111?????0001011")
  def CUSTOM1            = BitPat("b?????????????????000?????0101011")
  def CUSTOM1_RS1        = BitPat("b?????????????????010?????0101011")
  def CUSTOM1_RS1_RS2    = BitPat("b?????????????????011?????0101011")
  def CUSTOM1_RD         = BitPat("b?????????????????100?????0101011")
  def CUSTOM1_RD_RS1     = BitPat("b?????????????????110?????0101011")
  def CUSTOM1_RD_RS1_RS2 = BitPat("b?????????????????111?????0101011")
  def CUSTOM2            = BitPat("b?????????????????000?????1011011")
  def CUSTOM2_RS1        = BitPat("b?????????????????010?????1011011")
  def CUSTOM2_RS1_RS2    = BitPat("b?????????????????011?????1011011")
  def CUSTOM2_RD         = BitPat("b?????????????????100?????1011011")
  def CUSTOM2_RD_RS1     = BitPat("b?????????????????110?????1011011")
  def CUSTOM2_RD_RS1_RS2 = BitPat("b?????????????????111?????1011011")
  def CUSTOM3            = BitPat("b?????????????????000?????1111011")
  def CUSTOM3_RS1        = BitPat("b?????????????????010?????1111011")
  def CUSTOM3_RS1_RS2    = BitPat("b?????????????????011?????1111011")
  def CUSTOM3_RD         = BitPat("b?????????????????100?????1111011")
  def CUSTOM3_RD_RS1     = BitPat("b?????????????????110?????1111011")
  def CUSTOM3_RD_RS1_RS2 = BitPat("b?????????????????111?????1111011")
  def PECInst            = BitPat("b?????????????????????????1101011")
}

object CustomCSRs {
  val mnscratch = 0x350
  val mnepc = 0x351
  val mncause = 0x352
  val mnstatus = 0x353

  val mcrmkeyl = 0x7f0
  val mcrmkeyh = 0x7f1
  val scrtkeyl = 0x5f0
  val scrtkeyh = 0x5f1
  val scrakeyl = 0x5f2
  val scrakeyh = 0x5f3
  val scrbkeyl = 0x5f4
  val scrbkeyh = 0x5f5
  val scrckeyl = 0x5f6
  val scrckeyh = 0x5f7
  val scrdkeyl = 0x5f8
  val scrdkeyh = 0x5f9
  val screkeyl = 0x5fa
  val screkeyh = 0x5fb
  val scrfkeyl = 0x5fc
  val scrfkeyh = 0x5fd

  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += mnscratch
    res += mnepc
    res += mncause
    res += mnstatus

    res += mcrmkeyl
    res += mcrmkeyh
    res += scrtkeyl
    res += scrtkeyh
    res += scrakeyl
    res += scrakeyh
    res += scrbkeyl
    res += scrbkeyh
    res += scrckeyl
    res += scrckeyh
    res += scrdkeyl
    res += scrdkeyh
    res += screkeyl
    res += screkeyh
    res += scrfkeyl
    res += scrfkeyh
    res.toArray
  }
  val all32 = {
    val res = collection.mutable.ArrayBuffer(all:_*)
    res.toArray
  }
}
